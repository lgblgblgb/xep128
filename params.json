{
  "name": "Xep128",
  "tagline": "Enterprise-128 emulator (uses sdl2 and z80ex) with the main focus on emulating somewhat \"exotic\" hardware additions",
  "body": "# Xep128\r\n\r\n[![Join the chat at https://gitter.im/lgblgblgb/xep128](https://badges.gitter.im/lgblgblgb/xep128.svg)](https://gitter.im/lgblgblgb/xep128?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nXep128 is an Enterprise-128 (a Z80 based, 8 bit computer) emulator (uses SDL2\r\nand z80ex) with the main focus on emulating somewhat \"exotic\" hardware\r\nadditions.\r\n\r\nWritten by (C)2015,2016 LGB (Gábor Lénárt) <lgblgblgb@gmail.com>\r\n\r\nXep128 main site: http://xep128.lgb.hu/\r\nSource repository: http://github.com/lgblgblgb/xep128\r\n\r\nXep128 uses (modified, by me) Z80 emulator \"Z80ex\": https://sourceforge.net/projects/z80ex/\r\nand lodePNG to write screenshots: http://lodev.org/lodepng/\r\n\r\nXep128 is licensed under the terms of GNU/GPL v2, for more information please\r\nread file LICENSE. You can find the source on github, see above.\r\n\r\nWARNING! Xep128 is in early alpha stage currently! It lacks many important\r\nfeatures (no/ugly sound, not so precise nick emulation, etc etc), and it's not\r\ncomfortable to use, there is only CLI/config file based configuration, etc.\r\n\r\nCurrently it's mainly for Linux and/or UNIX-like systems and Windows, however\r\nsince I don't use Windows, I can't test if it really works (cross compiled on\r\nLinux).\r\n\r\nPlease note, that it's not the \"best\" Enterprise-128 emulator on the planet,\r\nfor that, you should use ep128emu project instead. Also, my emulator is not so\r\ncycle exact for now, it does not emulate sound quite well (currently), it also lacks\r\ndebugger what ep128emu has. However it emulates some \"more exotic\" (not so much\r\ntraditional) hardware additions becomes (or becoming) popular among EP users\r\nrecently: mouse support, APU (\"FPU\"), SD card reader and soon limited wiznet\r\nw5300 emulation (Ethernet connection with built-in TCP/IP support).\r\n\r\n# Installation on Linux / UNIX like OS (from source)\r\n\r\nYou can download the ZIP'ed repository from https://github.com/lgblgblgb/xep128\r\nor you can clone the repository, whatever. You need the SDL2,\r\nlibreadline and GTK3 _development_ installed (also some additional tools like\r\nthe C compulter), on Debian/Ubuntu like systems, it can be done something\r\nlike this (do not forget, that you should do this as root, so probably you\r\nneed \"sudo\" before this command):\r\n\r\n apt-get install libsdl2-dev make gcc wget libreadline6-dev libgtk-3-dev\r\n\r\nYou will also need the sjasm Z80 assembler somewhere in your PATH, if you\r\nmodified xep_rom.asm at least (otherwise sjasm is not needed).\r\n\r\nIn the source, you need to issue the command \"make\" (though if you modified\r\nsource I would recommend to say \"make dep\" first). It will compile the\r\nemulator, you should have an executable \"xep128\" at the end. Now you need\r\nthe ROM image and the SD card image. You can download it by hand (please\r\nread the Windows section about the URLs), or you can do it with the following\r\ncommands:\r\n\r\n make combined.rom\r\n\r\n make sdcard.img\r\n\r\nNow, you can execute the emulator from the current directory. Optionally you\r\ncan say \"make install\" (you need root access) which - by default - installs\r\nemulator and the ROM/SD card images into /usr/local.\r\n\r\nWarning, the SD-card image is 256Mbyte long! You can try the emulator without\r\nthe SD card image, but you won't be able to access its content then, of\r\ncourse.\r\n\r\n# Installation on Windows (binary, .exe)\r\n\r\nI've never used Windows, nor I have Windows installed. So the best I will\r\nbe able to do is trying to cross-compile for Windows on Linux.\r\n\r\nYou can try to compile Xep128 yourself using Linux with cross compiling\r\ntarget for win32 (*make win32*).\r\n\r\n**Or you can try my build (WARNING! Not tested, I have no windows!)**\r\n\r\nThis is how:\r\n\r\nhttp://xep128.lgb.hu/files/xep128-win32.zip\r\n\r\nDownload and unzip this archive somewhere. It contains xep128.exe, the\r\nROM file, and the SDL2 DLL.\r\n\r\nYou also need the SD card image (warning, 256Mbyte!), from here:\r\n\r\nhttp://xep128.lgb.hu/files/sdcard.img\r\n\r\nPut the file into the same directory where you put the content of xep128.zip.\r\n\r\nNow, you can try to execute xep128.exe ...\r\n\r\n# Usage\r\n\r\nMouse emulation more or less works: it emulates the \"boxsoft mouse interface\".\r\nIf you click into the emulation window, it enters into \"mouse grab\" mode,\r\nand you can use your mouse (if the software running on the emulated Ep128\r\nsupports mouse, of course). You can exit from this grab mode, if you press\r\nthe ESC button.\r\n\r\nJoystick (currently both of them at the _same_ time ...) is emulated with the\r\nnumeric keypad arrow keys. Because of some conflict between the \"boxsoft mouse\r\ninterface\" and joystick, there is an odd solution now: if you are in \"mouse\r\ngrab\" mode (see above) EP software will read data as mouse events, otherwise\r\njoystick. There is some auto detection, that shift pulses used by the mouse\r\nquery routines cause to switch into mouse mode after that read only. Thus,\r\nSymbOS (see later) will detect the mouse, but also there is an odd behaviour\r\nthe mouse behaves oddly if you are not in the grab mode though ...\r\n\r\nEmulation window can be resized, and/or you can switch between fullscreen and\r\nwindow mode by pressing F11. Note, these functions can have some bugs\r\ncurrently.\r\n\r\nYou can leave emulator with closing its window, by pressing F9, or giving\r\nthe EXOS command \"_XEP exit_\" (\":XEP\" exit in IS-BASIC of course).\r\n\r\nF10 creates a screenshot in PNG format, but it does not work currently, or\r\nhas bugs (it depends when you read this file ...).\r\n\r\nYou can try SymbOS out, it's included on the SD card image. It's a very nice\r\nmultitasking (!) window-oriented graphical operating system ported to multiple\r\nZ80 based computers, including Enterprise-128, MSX and Amstrad CPC too. To\r\ntry it, type the following command at the IS-BASIC prompt:\r\n\r\n LOAD\"SYM\"\r\n\r\nNote, that keyboard mapping is more-or-less \"positional\", eg, for quotation mark\r\nyou need to press shift+2 because quotation mark on the Enterprise keyboard\r\ncan be accessed with shifted key 2. And so on, you may get the idea.\r\n\r\nPause/break on your keyboard works as \"soft reset\". Press with shift key for\r\nhard reset.\r\n\r\nPlease continue with the next chapter for more advanced topics.\r\n\r\n# More information on emulated hardware add-ons\r\n\r\nThe SD card image is a normal VHD file, you can try to replace it with your own.\r\nSD card emulation is read-only currently. Card info is not correct, but it seems\r\nthe SDext ROM software does not mind it too much.\r\n\r\nRTC is emulated enough for time keeping (query only, you can't set the time).\r\nZT (ZozoTools) ROM is included in the combined ROM package, you can see the\r\nclock with typing this at the IS-BASIC prompt (_Warning: because of conflict\r\nwith Z180 and ZozoTools, this may not available in the current ROM image.\r\nClock/RTC would work, just you can't test it with this command, sorry_):\r\n\r\n :CLOCK\r\n\r\nQuirky \"printer emulation\" can be used: in case of \"printing\" emulator tries to\r\ncreate/append a file named \"print.out\" in the current directory. It's simply the\r\ncontent of bytes sent to the printer port, including all escape sequences!\r\nSome would be able to write an utility which renders the file as an EP80\r\nprinter like printout (including graphical mode, etc). Since print.out contains\r\nevery bytes sent to the printer, it's not a problem.\r\n\r\nZX Spectrum emulator card emulation :) does not work correctly. The provided\r\ncombined ROM pack file contains the ROM code (version 4.0). You can try that\r\nwith :ZX command from IS-BASIC prompt, but it's quite ugly.\r\n\r\nThere is an on-going work to emulate Z180 CPU. At least one EP exists with\r\nZ180 hacked in :) The problem: Z180 does not support some of the undocumented\r\n(but widely used) Z80 features, like separating IX and IY as two 8 bit\r\nregisters. The goal of the planned Z180 emulation is not about the correctness\r\nof Z180 timing, not the on-chip features (like DMA) currently, but _only_\r\nto be able to test softwares if it works with Z180 too (not using Z80\r\nundocumented features).\r\n\r\nFor normal Z80, one can select the good old NMOS, or the CMOS emulation.\r\nYou can issue command :XEP CPU to query CPU emulation status. You can also\r\nuse this to set the CPU type, with another word after CPU, it can be Z80\r\n(NMOS Z80), Z80C (CMOS Z80) and Z180 (it is always CMOS). EXOS command\r\n:XEP CPU can also be used with a number as an argument, it sets the CPU\r\nclock, for example (NOTE: this feature has bugs currently!):\r\n\r\n :XEP CPU 7.12\r\n\r\nRAM size can be queried with :XEP RAM command, also, you can use this\r\nconstruct to set RAM size up with :XEP RAM 128 (it will set 128 Kbytes of\r\nRAM). This also causes the emulated EP to reboot.\r\n\r\n# Configuration and command line\r\n\r\nXep128 is *not* a GUI oriented emulator. Its only GUI level component is the\r\nemulator window, and the OSD (On-Screen Display). Though it's possible to\r\nconfigure the emulator.\r\n\r\nFirst, you should be familiar with the file system usage of Xep128:\r\n\r\nIt's important to note the syntax and meaning of file names for Xep128\r\non the \"PC\" side (Linux or Windows, which runs Xep128). In any situation\r\nwhen Xep128 needs a file (reading config file, loading ROM image, using\r\nthe SD card disk image, and so on) it uses a common function which the\r\nfile names in a specific way.\r\n\r\n* If a file name has the form of \"@filename\" then it means \"filename\" in the\r\n  user preferences directory. Still, it's possible to use \"@dir/filename\"\r\n  (or @dir\\filename in case of Windows) for a sub-directory in the \"pref\r\n  dir\". So '@' basically means prefixing the file name with pref dir.\r\n* If a file name \"seems to be\" an absolute path (that is: the file name begins\r\n  with '/' in case of Unix/Linux or either of begins with '\\' or have\r\n  the \":\\\" part in case of Windows) then the file will be tried to use\r\n  as-is, as an absolute path without any prefixing.\r\n* Otherwise, the file name is tried to be used with various prefixes probed,\r\n  including the current directory, the data directory (on Linux/UNIX), and\r\n  even the pref directory. You must be careful, as it's possible to use\r\n  some other file in an other directory by Xep128 what you meant ... The\r\n  best way is to use the pref dir if possible, and it's also kinda private\r\n  storage only for Xep128.\r\n\r\nNow, the configuration possibilities:\r\n\r\nFirst, Xep128 has some built-in defaults, so it can run without any previous\r\nconfiguration step, without any configuration file, etc.\r\n\r\nSecond, Xep128 can read a text based config file. By default it tries to use\r\n@config (@ means the user preference directory - remember). On start-up, it\r\nwrites the @config-sample file (it is also noted in a message window, with\r\nthe full path, so you can learn what '@' means). You can use this file to\r\nrename it to config (in the pref directory of course) with some customization.\r\nYou can also override the config file to be used with the -config command line\r\nswitch (there, you should use the '@' syntax as well, if you need the pref\r\ndirectory). That sample config file can be useful, as it has even comments\r\nabout the syntax and meaning of a given option. You can even delete the sample\r\nconfig file, Xep128 will re-create it. It can be useful, if a new version of\r\nthe emulator has more options etc and you need to examine all of them (Xep128\r\nonly writes the sample config file if the file does not exist).\r\n\r\nThird, you can use command line switches, which overrides both the built-in\r\nconfig, and the configuration read from a file. You can even use the\r\n\"-config none\" option to de-activate config file reading, if you need only\r\nyour options.\r\n\r\nTo learn about command line switches, you can use the -help switch.\r\n**It also prints the pref directory** and other emulator related information,\r\nwhich can be useful in bug reports, etc.\r\n\r\nBasically, both the command line and configuration file syntax has the\r\nsame options, but in the config file you say \"key = value\" where in command\r\nline you need to specify \"-key value\" format. If you use the \"-config\"\r\nswitch, it must be the first command line argument though, \"-config @my\"\r\nwill use file \"my\" in the pref dir instead of default @config.\r\n\r\nBy default, Xep128 tries to load \"combined.rom\" from segment zero as the\r\nROM image. It's simple a concated series of ROM images, starting from\r\nsegment zero (thus the EXOS). Of course you can override even this with\r\n\"-rom@00 @myexos.rom\" for example in the command line (here again, the\r\n'@' before the file name means the pref dir, however rom@00 is simply\r\nthe ROM at segment 00) or with the \"rom@00 = @myexos.rom\" config file line.\r\nSince combined.rom is one big file loaded from segment zero, if you override\r\nthe rom@00 value, to load only your EXOS, still you will loose all of the\r\nother concated images, as combined.rom treated a single entity. Of course\r\nyou can specify other ROM images as well from different segments like\r\n\"rom@0c\" (ROM image from segment 0x0C) or such.\r\n\r\nFurther readings:\r\n\r\n* [Summary of CLI options, output of -help](doc/help-cli.txt)\r\n* [Example of a sample configuration file](doc/help-config.txt)\r\n\r\n# Known problems\r\n\r\nThere are many! I repeat myself: Xep128 is not a generic, or good emulator for\r\nan average EP user. It's more about emulation of some unusal add-ons.\r\n\r\nJust to mention some problems with Xep128:\r\n\r\n* no EXDOS/WD emulation\r\n* no menu/UI whatever\r\n* no debugger\r\n* no precise Nick emulation\r\n* no slowdown of VRAM access, would be on a real machine\r\n* no sound [in-progress now]\r\n\r\n# Credits\r\n\r\nJSep (a JavaScript based Enterprise-128 emulator, also written by myself) was\r\ngreat source for Xep128. Enteprise-128 forever forum is an essential site,\r\npeople there helped a lot (especially with JSep), I would mention IstvanV -\r\nhe has the great ep128emu emulator - and Zozosoft. LibZ80ex is the Z80\r\nemulator used in Xep128 (not written by me!). FUSE Spectrum emulator is\r\nimportant: it seems Z80Ex contains some code from FUSE, also they have\r\nwiznet w5100 emulation which is similar to the w5300 so it can help me\r\nsomewhat. LodePNG (not written by me!) project is used to create PNG\r\nscreenshots. It has been somewhat modified to exclude C++ parts and some\r\ndefaults though.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}